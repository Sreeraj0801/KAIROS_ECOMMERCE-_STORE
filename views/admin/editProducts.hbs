<main id="main" class="main">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.css">
  <section>
    <h3 class="text-primary  mb-5 fw-bold">EditProducts</h3>
    <hr>
    <div class="container">
      <form action="/admin/editProducts/{{product._id}}" enctype="multipart/form-data" method="post">
        <div class="row mb-3">
          <label for="inputText" class="col-sm-2  col-form-label">Model</label>
          <div class="col-sm-10">
            <input type="text" class="form-control" name="model" value="{{product.model}}">
          </div>

        </div>
        <div class="row mb-3">
          <label for="inputEmail" class="col-sm-2 col-form-label">title</label>
          <div class="col-sm-10">
            <input type="text" class="form-control" name="title" value="{{product.title}}">
          </div>
        </div>

        <div class="row mb-3">
          <label class="col-sm-2 col-form-label">Brand</label>
          <div class="col-sm-10">
            <select class="form-select" aria-label="Default select example" name="brand">
              {{#if brand}}
              <option value="{{brand._id}}">{{brand.brand}}</option>
              {{/if}}
              {{#each data.brand}}
              <option value="{{this._id}}">{{this.brand}}</option>
              {{/each}}
            </select>
          </div>
        </div>

        {{!-- <div class="row mb-3">
          <label for="inputPassword" class="col-sm-2 col-form-label">Brand</label>
          <div class="col-sm-10">
            <input type="text" class="form-control" name="brand">
          </div>
        </div> --}}

        <div class="row mb-3">
          <label class="col-sm-2 col-form-label">Category</label>
          <div class="col-sm-10">
            <select class="form-select" aria-label="Default select example" name="category">
              {{#if category}}
              <option selected value="{{category._id}}">{{category.category}}</option>
              {{/if}}
              {{#if data}}
              {{#each data.category}}
              <option value="{{this._id}}">{{this.category}}</option>
              {{/each}}
              {{/if}}
          </div>
        </div>

        <div class="row mb-3">
          <label class="col-sm-2 col-form-label"></label>
          <div class="col-sm-10">
            <select class="form-select" aria-label="Default select example" name="price">
              <option value=""></option>
            </select>
          </div>
        </div>

        <div class="row mb-3">
          <label for="inputNumber" class="col-sm-2 col-form-label">Price</label>
          <div class="col-sm-5">
            <input type="number" class="form-control" name="price" value="{{product.price}}">
          </div>
        </div>

        <div class="row mb-3">
          <label for="inputNumber" class="col-sm-2 col-form-label">Stock</label>
          <div class="col-sm-3">
            <input type="number" class="form-control" name="stock" value="{{product.stock}}">
          </div>
        </div>


        <div class="row mb-3">
          <label for="inputNumber" class="col-sm-2 col-form-label">File Upload</label>
          <div class="col-sm-8 d-flex">
            <img id="imageView" src="/productImages/{{product._id}}.jpg" alt="" style="width:200px; height: 200px;">
            <input class="form-control p-5 m-5 text-warning" type="file" id="formFile" name="image"
              value="{{product.image}}" accept="image/gif, image/jpeg, image/png" onchange="viewImage(event)" data-bs-toggle="modal"
                data-bs-target="#exampleModal"  multiple >
          </div>
        </div>

        <div class="row mb-3">
          <label for="inputDiscription" class="col-sm-2 col-form-label">Discription</label>
          <div class="col-sm-10">
            <textarea class="form-control" style="height: 100px" value="{{product.discription}}"
              name="discription">{{product.discription}}</textarea>
          </div>
        </div>
        <fieldset class="row mb-3">
          <legend class="col-form-label col-sm-2 pt-0">Gender</legend>
          <div class="col-sm-10">
            <div class="form-check">
              <input class="form-check-input" type="radio" name="gender" id="gridRadios1" value="{{product.gender}}"
                checked>
              <label class="form-check-label" for="gridRadios1">
                {{product.gender}}
              </label>
            </div>
            <div class="form-check">
              <input class="form-check-input" type="radio" name="gender" id="gridRadios1" value="Unisex" checked>
              <label class="form-check-label" for="gridRadios1">
                Unisex
              </label>
            </div>
            <div class="form-check">
              <input class="form-check-input" type="radio" name="gender" id="gridRadios2" value="Male">
              <label class="form-check-label" for="gridRadios2">
                Male
              </label>
            </div>
            <div class="form-check ">
              <input class="form-check-input" type="radio" name="gender" id="gridRadios" value="Female">
              <label class="form-check-label" for="gridRadios3">
                Female
              </label>
            </div>
          </div>
        </fieldset>

        <div class="col-sm-10 text-center">
          <button type="submit" class="btn btn-primary">Edit Product</button>
        </div>
    </div>

    </form>
    </div>
  </section>

      <!-- Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
      aria-hidden="true">
      <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
            <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <div class="form-group row" id="test">
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Save changes</button>
          </div>
        </div>
      </div>
    </div>
</main>

<script>
  function viewImage(event) {
    document.getElementById('imageView').src = URL.createObjectURL(event.target.files[0])
  }
</script>


{{!-------------------------------------------- Image cropping ----------------------------------------}}
<script>
    const input = document.getElementById('formFile')
    const test = document.getElementById('test')
    input.addEventListener('change', () => {
        
        // Getting image file object from the input variable
        const img_data = []
       // const imagebox = []
       // const crop_btn = []
       // const confirm_btn = []
        
        const url = []
        const length= input.files.length
       
        for (i = 0; i < length; i++) {
          
            test.innerHTML += `<div class="col-4"><div id="image-box${i}" class="image-container" style="height: 350px; width: 350px;"> </div>
    <button class="btn btn-outline-info" id="crop-btn${i}" style="width: 100%; margin-top: 10px; display: block;" type="button">Crop</button> </div>`
        }
        for (i = 0; i < length; i++) {
            img_data[i] = input.files[i]
        }
        
        img_data.forEach((image_data, i) => {
            url[i] = URL.createObjectURL(image_data)
        })
        // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
        // The new object URL represents the specified File object or Blob object.
        url.forEach((url,i)=>{
            document.getElementById('image-box'+i).innerHTML = `<img src="${url}" id="image${i}" style="width:100%;">`
        })
        
        // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
        // Storing that cropping view image in a variable
  
        // Displaying the image box
        //for(i=0;i<length;i++){
      //      document.getElementById('image-box'+i).style.display= 'block'
      //       document.getElementById('crop-btn'+i).style.display= 'block'
      //  }
       
        for(i=0;i<length;i++){
            cropper(img_data[i],document.getElementById('image'+i),i,document.getElementById('crop-btn'+i),document.getElementById('image-box'+i))
        }
        
        // Creating a croper object with the cropping view image
        // The new Cropper() method will do all the magic and diplay the cropping view and adding cropping functionality on the website
        // For more settings, check out their official documentation at https://github.com/fengyuanchen/cropperjs
        let container = new DataTransfer();
        let fileInputElement = document.getElementById('formFile');
        function cropper(img_data, image, index, crop_btn, imagebox) {
            const cropper = new Cropper(image, {
                autoCropArea: 1,
                viewMode: 1,
                scalable: false,
                zoomable: false,
                movable: false,
                minCropBoxWidth: 50,
                minCropBoxHeight: 50,
            })
            // When crop button is clicked this event will get triggered
            crop_btn.addEventListener('click', () => {
             
                // This method coverts the selected cropped image on the cropper canvas into a blob object
                cropper.getCroppedCanvas().toBlob((blob) => {
                    // Gets the original image data
                    // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
                    let file = new File([blob], img_data.name, { type: "image/*", lastModified: new Date().getTime() });
                    // Create a new container
                    // Add the cropped image file to the container
                    container.items.add(file);
                    fileInputElement.files = container.files
                    // Replace the original image file with the new cropped image file
                  // Hide the cropper box
                    imagebox.style.display = 'none'
                    // Hide the crop button
                    crop_btn.style.display = 'none'
                });
            }); 
        }
    });
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.js"></script>